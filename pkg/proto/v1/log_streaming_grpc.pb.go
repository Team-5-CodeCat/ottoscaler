// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: log_streaming.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OttoscalerService_ScaleUp_FullMethodName         = "/ottoscaler.v1.OttoscalerService/ScaleUp"
	OttoscalerService_ScaleDown_FullMethodName       = "/ottoscaler.v1.OttoscalerService/ScaleDown"
	OttoscalerService_GetWorkerStatus_FullMethodName = "/ottoscaler.v1.OttoscalerService/GetWorkerStatus"
	OttoscalerService_ExecutePipeline_FullMethodName = "/ottoscaler.v1.OttoscalerService/ExecutePipeline"
)

// OttoscalerServiceClient is the client API for OttoscalerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # OttoscalerService - Otto-handler에서 Ottoscaler로의 스케일링 명령 서비스
//
// 🎯 목적:
// - Otto-handler가 Ottoscaler에게 Worker Pod 스케일링 명령을 전송
// - 스케일링 요청에 대한 동기적 응답 처리
// - Worker Pod 상태 조회 기능
//
// 📊 통신 패턴:
// 1. Otto-handler → ScaleUp/ScaleDown 호출 → Ottoscaler가 Worker Pod 처리
// 2. Otto-handler → GetWorkerStatus 호출 → 현재 Worker 상태 반환
type OttoscalerServiceClient interface {
	// ScaleUp - Worker Pod를 생성하여 스케일 업
	//
	// 📝 동작 방식:
	// - Otto-handler가 새로운 CI/CD 작업 시작 시 호출
	// - Ottoscaler가 지정된 개수만큼 Worker Pod 생성
	// - 생성된 Worker Pod 정보를 응답으로 반환
	ScaleUp(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error)
	// ScaleDown - Worker Pod를 종료하여 스케일 다운
	//
	// 📝 동작 방식:
	// - Otto-handler가 CI/CD 작업 완료 또는 취소 시 호출
	// - Ottoscaler가 지정된 Worker Pod들을 정리
	ScaleDown(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error)
	// GetWorkerStatus - 현재 Worker Pod 상태 조회
	//
	// 📝 동작 방식:
	// - Otto-handler가 Worker 상태를 확인하고 싶을 때 호출
	// - 활성 상태인 Worker Pod 목록과 상태 정보 반환
	GetWorkerStatus(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (*WorkerStatusResponse, error)
	// ExecutePipeline - CI/CD Pipeline 실행
	//
	// 📝 동작 방식:
	// - Otto-handler가 전체 Pipeline (build, test, deploy 등)을 전달
	// - Ottoscaler가 Stage 의존성을 파악하여 순차/병렬 실행
	// - 실시간 진행 상황을 스트리밍으로 반환
	ExecutePipeline(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PipelineProgress], error)
}

type ottoscalerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOttoscalerServiceClient(cc grpc.ClientConnInterface) OttoscalerServiceClient {
	return &ottoscalerServiceClient{cc}
}

func (c *ottoscalerServiceClient) ScaleUp(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleResponse)
	err := c.cc.Invoke(ctx, OttoscalerService_ScaleUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ottoscalerServiceClient) ScaleDown(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleResponse)
	err := c.cc.Invoke(ctx, OttoscalerService_ScaleDown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ottoscalerServiceClient) GetWorkerStatus(ctx context.Context, in *WorkerStatusRequest, opts ...grpc.CallOption) (*WorkerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerStatusResponse)
	err := c.cc.Invoke(ctx, OttoscalerService_GetWorkerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ottoscalerServiceClient) ExecutePipeline(ctx context.Context, in *PipelineRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PipelineProgress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OttoscalerService_ServiceDesc.Streams[0], OttoscalerService_ExecutePipeline_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PipelineRequest, PipelineProgress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OttoscalerService_ExecutePipelineClient = grpc.ServerStreamingClient[PipelineProgress]

// OttoscalerServiceServer is the server API for OttoscalerService service.
// All implementations must embed UnimplementedOttoscalerServiceServer
// for forward compatibility.
//
// # OttoscalerService - Otto-handler에서 Ottoscaler로의 스케일링 명령 서비스
//
// 🎯 목적:
// - Otto-handler가 Ottoscaler에게 Worker Pod 스케일링 명령을 전송
// - 스케일링 요청에 대한 동기적 응답 처리
// - Worker Pod 상태 조회 기능
//
// 📊 통신 패턴:
// 1. Otto-handler → ScaleUp/ScaleDown 호출 → Ottoscaler가 Worker Pod 처리
// 2. Otto-handler → GetWorkerStatus 호출 → 현재 Worker 상태 반환
type OttoscalerServiceServer interface {
	// ScaleUp - Worker Pod를 생성하여 스케일 업
	//
	// 📝 동작 방식:
	// - Otto-handler가 새로운 CI/CD 작업 시작 시 호출
	// - Ottoscaler가 지정된 개수만큼 Worker Pod 생성
	// - 생성된 Worker Pod 정보를 응답으로 반환
	ScaleUp(context.Context, *ScaleRequest) (*ScaleResponse, error)
	// ScaleDown - Worker Pod를 종료하여 스케일 다운
	//
	// 📝 동작 방식:
	// - Otto-handler가 CI/CD 작업 완료 또는 취소 시 호출
	// - Ottoscaler가 지정된 Worker Pod들을 정리
	ScaleDown(context.Context, *ScaleRequest) (*ScaleResponse, error)
	// GetWorkerStatus - 현재 Worker Pod 상태 조회
	//
	// 📝 동작 방식:
	// - Otto-handler가 Worker 상태를 확인하고 싶을 때 호출
	// - 활성 상태인 Worker Pod 목록과 상태 정보 반환
	GetWorkerStatus(context.Context, *WorkerStatusRequest) (*WorkerStatusResponse, error)
	// ExecutePipeline - CI/CD Pipeline 실행
	//
	// 📝 동작 방식:
	// - Otto-handler가 전체 Pipeline (build, test, deploy 등)을 전달
	// - Ottoscaler가 Stage 의존성을 파악하여 순차/병렬 실행
	// - 실시간 진행 상황을 스트리밍으로 반환
	ExecutePipeline(*PipelineRequest, grpc.ServerStreamingServer[PipelineProgress]) error
	mustEmbedUnimplementedOttoscalerServiceServer()
}

// UnimplementedOttoscalerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOttoscalerServiceServer struct{}

func (UnimplementedOttoscalerServiceServer) ScaleUp(context.Context, *ScaleRequest) (*ScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleUp not implemented")
}
func (UnimplementedOttoscalerServiceServer) ScaleDown(context.Context, *ScaleRequest) (*ScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDown not implemented")
}
func (UnimplementedOttoscalerServiceServer) GetWorkerStatus(context.Context, *WorkerStatusRequest) (*WorkerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerStatus not implemented")
}
func (UnimplementedOttoscalerServiceServer) ExecutePipeline(*PipelineRequest, grpc.ServerStreamingServer[PipelineProgress]) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePipeline not implemented")
}
func (UnimplementedOttoscalerServiceServer) mustEmbedUnimplementedOttoscalerServiceServer() {}
func (UnimplementedOttoscalerServiceServer) testEmbeddedByValue()                           {}

// UnsafeOttoscalerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OttoscalerServiceServer will
// result in compilation errors.
type UnsafeOttoscalerServiceServer interface {
	mustEmbedUnimplementedOttoscalerServiceServer()
}

func RegisterOttoscalerServiceServer(s grpc.ServiceRegistrar, srv OttoscalerServiceServer) {
	// If the following call pancis, it indicates UnimplementedOttoscalerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OttoscalerService_ServiceDesc, srv)
}

func _OttoscalerService_ScaleUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OttoscalerServiceServer).ScaleUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OttoscalerService_ScaleUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OttoscalerServiceServer).ScaleUp(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OttoscalerService_ScaleDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OttoscalerServiceServer).ScaleDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OttoscalerService_ScaleDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OttoscalerServiceServer).ScaleDown(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OttoscalerService_GetWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OttoscalerServiceServer).GetWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OttoscalerService_GetWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OttoscalerServiceServer).GetWorkerStatus(ctx, req.(*WorkerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OttoscalerService_ExecutePipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OttoscalerServiceServer).ExecutePipeline(m, &grpc.GenericServerStream[PipelineRequest, PipelineProgress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OttoscalerService_ExecutePipelineServer = grpc.ServerStreamingServer[PipelineProgress]

// OttoscalerService_ServiceDesc is the grpc.ServiceDesc for OttoscalerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OttoscalerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ottoscaler.v1.OttoscalerService",
	HandlerType: (*OttoscalerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScaleUp",
			Handler:    _OttoscalerService_ScaleUp_Handler,
		},
		{
			MethodName: "ScaleDown",
			Handler:    _OttoscalerService_ScaleDown_Handler,
		},
		{
			MethodName: "GetWorkerStatus",
			Handler:    _OttoscalerService_GetWorkerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecutePipeline",
			Handler:       _OttoscalerService_ExecutePipeline_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log_streaming.proto",
}

const (
	OttoHandlerLogService_ForwardWorkerLogs_FullMethodName  = "/ottoscaler.v1.OttoHandlerLogService/ForwardWorkerLogs"
	OttoHandlerLogService_NotifyWorkerStatus_FullMethodName = "/ottoscaler.v1.OttoHandlerLogService/NotifyWorkerStatus"
)

// OttoHandlerLogServiceClient is the client API for OttoHandlerLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # OttoHandlerLogService - Ottoscaler에서 Otto-handler로의 로그 전달 서비스
//
// 🎯 목적:
// - Ottoscaler가 수집한 Worker Pod 로그를 Otto-handler로 전달
// - Otto-handler에서 로그를 받아 웹 인터페이스에 표시
// - 실시간 로그 스트리밍을 통한 CI/CD 작업 모니터링
//
// 📊 통신 패턴:
// 1. Ottoscaler → ForwardWorkerLogs() 스트림으로 로그 전송
// 2. Otto-handler → LogForwardResponse로 처리 상태 응답
type OttoHandlerLogServiceClient interface {
	// ForwardWorkerLogs - Worker Pod 로그를 Otto-handler로 전달
	//
	// 📝 동작 방식:
	// - Client (Ottoscaler): WorkerLogEntry를 지속적으로 전송
	// - Server (Otto-handler): LogForwardResponse로 처리 상태 응답
	//
	// 🔄 스트림 라이프사이클:
	// 1. Ottoscaler가 Worker Pod 로그 수집 시작
	// 2. 로그 발생 시마다 WorkerLogEntry 전송
	// 3. Otto-handler가 LogForwardResponse로 ACK/RETRY 응답
	// 4. Worker 작업 완료 시 스트림 종료
	ForwardWorkerLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkerLogEntry, LogForwardResponse], error)
	// NotifyWorkerStatus - Worker Pod 상태 변경 알림
	//
	// 📝 동작 방식:
	// - Ottoscaler에서 Worker Pod 상태 변경 시 호출
	// - Otto-handler에서 상태를 받아 UI 업데이트
	NotifyWorkerStatus(ctx context.Context, in *WorkerStatusNotification, opts ...grpc.CallOption) (*WorkerStatusAck, error)
}

type ottoHandlerLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOttoHandlerLogServiceClient(cc grpc.ClientConnInterface) OttoHandlerLogServiceClient {
	return &ottoHandlerLogServiceClient{cc}
}

func (c *ottoHandlerLogServiceClient) ForwardWorkerLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkerLogEntry, LogForwardResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OttoHandlerLogService_ServiceDesc.Streams[0], OttoHandlerLogService_ForwardWorkerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerLogEntry, LogForwardResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OttoHandlerLogService_ForwardWorkerLogsClient = grpc.BidiStreamingClient[WorkerLogEntry, LogForwardResponse]

func (c *ottoHandlerLogServiceClient) NotifyWorkerStatus(ctx context.Context, in *WorkerStatusNotification, opts ...grpc.CallOption) (*WorkerStatusAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerStatusAck)
	err := c.cc.Invoke(ctx, OttoHandlerLogService_NotifyWorkerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OttoHandlerLogServiceServer is the server API for OttoHandlerLogService service.
// All implementations must embed UnimplementedOttoHandlerLogServiceServer
// for forward compatibility.
//
// # OttoHandlerLogService - Ottoscaler에서 Otto-handler로의 로그 전달 서비스
//
// 🎯 목적:
// - Ottoscaler가 수집한 Worker Pod 로그를 Otto-handler로 전달
// - Otto-handler에서 로그를 받아 웹 인터페이스에 표시
// - 실시간 로그 스트리밍을 통한 CI/CD 작업 모니터링
//
// 📊 통신 패턴:
// 1. Ottoscaler → ForwardWorkerLogs() 스트림으로 로그 전송
// 2. Otto-handler → LogForwardResponse로 처리 상태 응답
type OttoHandlerLogServiceServer interface {
	// ForwardWorkerLogs - Worker Pod 로그를 Otto-handler로 전달
	//
	// 📝 동작 방식:
	// - Client (Ottoscaler): WorkerLogEntry를 지속적으로 전송
	// - Server (Otto-handler): LogForwardResponse로 처리 상태 응답
	//
	// 🔄 스트림 라이프사이클:
	// 1. Ottoscaler가 Worker Pod 로그 수집 시작
	// 2. 로그 발생 시마다 WorkerLogEntry 전송
	// 3. Otto-handler가 LogForwardResponse로 ACK/RETRY 응답
	// 4. Worker 작업 완료 시 스트림 종료
	ForwardWorkerLogs(grpc.BidiStreamingServer[WorkerLogEntry, LogForwardResponse]) error
	// NotifyWorkerStatus - Worker Pod 상태 변경 알림
	//
	// 📝 동작 방식:
	// - Ottoscaler에서 Worker Pod 상태 변경 시 호출
	// - Otto-handler에서 상태를 받아 UI 업데이트
	NotifyWorkerStatus(context.Context, *WorkerStatusNotification) (*WorkerStatusAck, error)
	mustEmbedUnimplementedOttoHandlerLogServiceServer()
}

// UnimplementedOttoHandlerLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOttoHandlerLogServiceServer struct{}

func (UnimplementedOttoHandlerLogServiceServer) ForwardWorkerLogs(grpc.BidiStreamingServer[WorkerLogEntry, LogForwardResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardWorkerLogs not implemented")
}
func (UnimplementedOttoHandlerLogServiceServer) NotifyWorkerStatus(context.Context, *WorkerStatusNotification) (*WorkerStatusAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyWorkerStatus not implemented")
}
func (UnimplementedOttoHandlerLogServiceServer) mustEmbedUnimplementedOttoHandlerLogServiceServer() {}
func (UnimplementedOttoHandlerLogServiceServer) testEmbeddedByValue()                               {}

// UnsafeOttoHandlerLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OttoHandlerLogServiceServer will
// result in compilation errors.
type UnsafeOttoHandlerLogServiceServer interface {
	mustEmbedUnimplementedOttoHandlerLogServiceServer()
}

func RegisterOttoHandlerLogServiceServer(s grpc.ServiceRegistrar, srv OttoHandlerLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedOttoHandlerLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OttoHandlerLogService_ServiceDesc, srv)
}

func _OttoHandlerLogService_ForwardWorkerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OttoHandlerLogServiceServer).ForwardWorkerLogs(&grpc.GenericServerStream[WorkerLogEntry, LogForwardResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OttoHandlerLogService_ForwardWorkerLogsServer = grpc.BidiStreamingServer[WorkerLogEntry, LogForwardResponse]

func _OttoHandlerLogService_NotifyWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStatusNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OttoHandlerLogServiceServer).NotifyWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OttoHandlerLogService_NotifyWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OttoHandlerLogServiceServer).NotifyWorkerStatus(ctx, req.(*WorkerStatusNotification))
	}
	return interceptor(ctx, in, info, handler)
}

// OttoHandlerLogService_ServiceDesc is the grpc.ServiceDesc for OttoHandlerLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OttoHandlerLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ottoscaler.v1.OttoHandlerLogService",
	HandlerType: (*OttoHandlerLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyWorkerStatus",
			Handler:    _OttoHandlerLogService_NotifyWorkerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardWorkerLogs",
			Handler:       _OttoHandlerLogService_ForwardWorkerLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "log_streaming.proto",
}

const (
	LogStreamingService_StreamLogs_FullMethodName     = "/ottoscaler.v1.LogStreamingService/StreamLogs"
	LogStreamingService_RegisterWorker_FullMethodName = "/ottoscaler.v1.LogStreamingService/RegisterWorker"
)

// LogStreamingServiceClient is the client API for LogStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamingServiceClient interface {
	// StreamLogs - 양방향 스트리밍 RPC로 로그 전송
	//
	// 📝 동작 방식:
	// - Client (Worker Pod): LogEntry 메시지를 지속적으로 전송
	// - Server (NestJS): LogResponse로 처리 상태 응답
	// - 연결이 끊어지면 자동으로 재연결 시도
	//
	// 🔄 스트림 라이프사이클:
	// 1. Worker Pod가 스트림 연결 시작
	// 2. 로그 발생 시마다 LogEntry 전송
	// 3. 서버가 LogResponse로 ACK/RETRY/DROP 응답
	// 4. Worker 작업 완료 시 스트림 종료
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogEntry, LogResponse], error)
	// RegisterWorker - Worker Pod 시작 시 서버에 등록
	//
	// 📋 등록 프로세스:
	// 1. Worker Pod가 시작되면 즉시 호출
	// 2. Worker 메타데이터와 작업 정보 전송
	// 3. 서버에서 세션 ID와 로깅 설정 반환
	// 4. 이후 StreamLogs에서 세션 ID 사용
	RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type logStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamingServiceClient(cc grpc.ClientConnInterface) LogStreamingServiceClient {
	return &logStreamingServiceClient{cc}
}

func (c *logStreamingServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogEntry, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogStreamingService_ServiceDesc.Streams[0], LogStreamingService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogEntry, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsClient = grpc.BidiStreamingClient[LogEntry, LogResponse]

func (c *logStreamingServiceClient) RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, LogStreamingService_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamingServiceServer is the server API for LogStreamingService service.
// All implementations must embed UnimplementedLogStreamingServiceServer
// for forward compatibility.
type LogStreamingServiceServer interface {
	// StreamLogs - 양방향 스트리밍 RPC로 로그 전송
	//
	// 📝 동작 방식:
	// - Client (Worker Pod): LogEntry 메시지를 지속적으로 전송
	// - Server (NestJS): LogResponse로 처리 상태 응답
	// - 연결이 끊어지면 자동으로 재연결 시도
	//
	// 🔄 스트림 라이프사이클:
	// 1. Worker Pod가 스트림 연결 시작
	// 2. 로그 발생 시마다 LogEntry 전송
	// 3. 서버가 LogResponse로 ACK/RETRY/DROP 응답
	// 4. Worker 작업 완료 시 스트림 종료
	StreamLogs(grpc.BidiStreamingServer[LogEntry, LogResponse]) error
	// RegisterWorker - Worker Pod 시작 시 서버에 등록
	//
	// 📋 등록 프로세스:
	// 1. Worker Pod가 시작되면 즉시 호출
	// 2. Worker 메타데이터와 작업 정보 전송
	// 3. 서버에서 세션 ID와 로깅 설정 반환
	// 4. 이후 StreamLogs에서 세션 ID 사용
	RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error)
	mustEmbedUnimplementedLogStreamingServiceServer()
}

// UnimplementedLogStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStreamingServiceServer struct{}

func (UnimplementedLogStreamingServiceServer) StreamLogs(grpc.BidiStreamingServer[LogEntry, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamingServiceServer) RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedLogStreamingServiceServer) mustEmbedUnimplementedLogStreamingServiceServer() {}
func (UnimplementedLogStreamingServiceServer) testEmbeddedByValue()                             {}

// UnsafeLogStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamingServiceServer will
// result in compilation errors.
type UnsafeLogStreamingServiceServer interface {
	mustEmbedUnimplementedLogStreamingServiceServer()
}

func RegisterLogStreamingServiceServer(s grpc.ServiceRegistrar, srv LogStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStreamingService_ServiceDesc, srv)
}

func _LogStreamingService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamingServiceServer).StreamLogs(&grpc.GenericServerStream[LogEntry, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsServer = grpc.BidiStreamingServer[LogEntry, LogResponse]

func _LogStreamingService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamingServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStreamingService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamingServiceServer).RegisterWorker(ctx, req.(*WorkerRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStreamingService_ServiceDesc is the grpc.ServiceDesc for LogStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ottoscaler.v1.LogStreamingService",
	HandlerType: (*LogStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _LogStreamingService_RegisterWorker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStreamingService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "log_streaming.proto",
}
