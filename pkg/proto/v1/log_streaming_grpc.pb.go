// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: log_streaming.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogStreamingService_StreamLogs_FullMethodName     = "/ottoscaler.v1.LogStreamingService/StreamLogs"
	LogStreamingService_RegisterWorker_FullMethodName = "/ottoscaler.v1.LogStreamingService/RegisterWorker"
)

// LogStreamingServiceClient is the client API for LogStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # LogStreamingService - Worker Pod에서 NestJS 서버로의 실시간 로그 스트리밍 서비스
//
// 🎯 목적:
// - Worker Pod의 stdout/stderr 로그를 실시간으로 NestJS 서버에 전송
// - 양방향 스트리밍을 통한 효율적인 로그 전송 및 피드백 처리
// - Worker Pod 등록 및 설정 관리
//
// 📊 통신 패턴:
// 1. Worker Pod 시작 → RegisterWorker() 호출 → 세션 설정 받기
// 2. 로그 생성 시마다 → StreamLogs() 스트림으로 전송 → 응답 받기
// 3. Worker Pod 종료 시 → 스트림 연결 자동 종료
type LogStreamingServiceClient interface {
	// StreamLogs - 양방향 스트리밍 RPC로 로그 전송
	//
	// 📝 동작 방식:
	// - Client (Worker Pod): LogEntry 메시지를 지속적으로 전송
	// - Server (NestJS): LogResponse로 처리 상태 응답
	// - 연결이 끊어지면 자동으로 재연결 시도
	//
	// 🔄 스트림 라이프사이클:
	// 1. Worker Pod가 스트림 연결 시작
	// 2. 로그 발생 시마다 LogEntry 전송
	// 3. 서버가 LogResponse로 ACK/RETRY/DROP 응답
	// 4. Worker 작업 완료 시 스트림 종료
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogEntry, LogResponse], error)
	// RegisterWorker - Worker Pod 시작 시 서버에 등록
	//
	// 📋 등록 프로세스:
	// 1. Worker Pod가 시작되면 즉시 호출
	// 2. Worker 메타데이터와 작업 정보 전송
	// 3. 서버에서 세션 ID와 로깅 설정 반환
	// 4. 이후 StreamLogs에서 세션 ID 사용
	RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type logStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamingServiceClient(cc grpc.ClientConnInterface) LogStreamingServiceClient {
	return &logStreamingServiceClient{cc}
}

func (c *logStreamingServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[LogEntry, LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogStreamingService_ServiceDesc.Streams[0], LogStreamingService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogEntry, LogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsClient = grpc.BidiStreamingClient[LogEntry, LogResponse]

func (c *logStreamingServiceClient) RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, LogStreamingService_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamingServiceServer is the server API for LogStreamingService service.
// All implementations must embed UnimplementedLogStreamingServiceServer
// for forward compatibility.
//
// # LogStreamingService - Worker Pod에서 NestJS 서버로의 실시간 로그 스트리밍 서비스
//
// 🎯 목적:
// - Worker Pod의 stdout/stderr 로그를 실시간으로 NestJS 서버에 전송
// - 양방향 스트리밍을 통한 효율적인 로그 전송 및 피드백 처리
// - Worker Pod 등록 및 설정 관리
//
// 📊 통신 패턴:
// 1. Worker Pod 시작 → RegisterWorker() 호출 → 세션 설정 받기
// 2. 로그 생성 시마다 → StreamLogs() 스트림으로 전송 → 응답 받기
// 3. Worker Pod 종료 시 → 스트림 연결 자동 종료
type LogStreamingServiceServer interface {
	// StreamLogs - 양방향 스트리밍 RPC로 로그 전송
	//
	// 📝 동작 방식:
	// - Client (Worker Pod): LogEntry 메시지를 지속적으로 전송
	// - Server (NestJS): LogResponse로 처리 상태 응답
	// - 연결이 끊어지면 자동으로 재연결 시도
	//
	// 🔄 스트림 라이프사이클:
	// 1. Worker Pod가 스트림 연결 시작
	// 2. 로그 발생 시마다 LogEntry 전송
	// 3. 서버가 LogResponse로 ACK/RETRY/DROP 응답
	// 4. Worker 작업 완료 시 스트림 종료
	StreamLogs(grpc.BidiStreamingServer[LogEntry, LogResponse]) error
	// RegisterWorker - Worker Pod 시작 시 서버에 등록
	//
	// 📋 등록 프로세스:
	// 1. Worker Pod가 시작되면 즉시 호출
	// 2. Worker 메타데이터와 작업 정보 전송
	// 3. 서버에서 세션 ID와 로깅 설정 반환
	// 4. 이후 StreamLogs에서 세션 ID 사용
	RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error)
	mustEmbedUnimplementedLogStreamingServiceServer()
}

// UnimplementedLogStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStreamingServiceServer struct{}

func (UnimplementedLogStreamingServiceServer) StreamLogs(grpc.BidiStreamingServer[LogEntry, LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamingServiceServer) RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedLogStreamingServiceServer) mustEmbedUnimplementedLogStreamingServiceServer() {}
func (UnimplementedLogStreamingServiceServer) testEmbeddedByValue()                             {}

// UnsafeLogStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamingServiceServer will
// result in compilation errors.
type UnsafeLogStreamingServiceServer interface {
	mustEmbedUnimplementedLogStreamingServiceServer()
}

func RegisterLogStreamingServiceServer(s grpc.ServiceRegistrar, srv LogStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStreamingService_ServiceDesc, srv)
}

func _LogStreamingService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamingServiceServer).StreamLogs(&grpc.GenericServerStream[LogEntry, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_StreamLogsServer = grpc.BidiStreamingServer[LogEntry, LogResponse]

func _LogStreamingService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamingServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStreamingService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamingServiceServer).RegisterWorker(ctx, req.(*WorkerRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStreamingService_ServiceDesc is the grpc.ServiceDesc for LogStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ottoscaler.v1.LogStreamingService",
	HandlerType: (*LogStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _LogStreamingService_RegisterWorker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStreamingService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "log_streaming.proto",
}
