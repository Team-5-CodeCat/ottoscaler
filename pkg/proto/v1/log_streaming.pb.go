// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.4
// source: log_streaming.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status - 로그 처리 결과 상태
//
// ✅ ACK (0): 성공적으로 처리됨
// 🔄 RETRY (1): 일시적 오류, 재시도 필요 (네트워크 지연, 서버 부하 등)
// ❌ DROP (2): 영구적 오류, 해당 로그 포기 (잘못된 형식, 권한 없음 등)
type LogResponse_Status int32

const (
	LogResponse_ACK   LogResponse_Status = 0 // 성공적으로 받고 처리함
	LogResponse_RETRY LogResponse_Status = 1 // 일시적 실패, 재시도 요청
	LogResponse_DROP  LogResponse_Status = 2 // 영구적 실패, 로그 포기
)

// Enum value maps for LogResponse_Status.
var (
	LogResponse_Status_name = map[int32]string{
		0: "ACK",
		1: "RETRY",
		2: "DROP",
	}
	LogResponse_Status_value = map[string]int32{
		"ACK":   0,
		"RETRY": 1,
		"DROP":  2,
	}
)

func (x LogResponse_Status) Enum() *LogResponse_Status {
	p := new(LogResponse_Status)
	*p = x
	return p
}

func (x LogResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_log_streaming_proto_enumTypes[0].Descriptor()
}

func (LogResponse_Status) Type() protoreflect.EnumType {
	return &file_log_streaming_proto_enumTypes[0]
}

func (x LogResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogResponse_Status.Descriptor instead.
func (LogResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{1, 0}
}

type RegistrationResponse_Status int32

const (
	RegistrationResponse_SUCCESS            RegistrationResponse_Status = 0
	RegistrationResponse_ALREADY_REGISTERED RegistrationResponse_Status = 1
	RegistrationResponse_SERVER_FULL        RegistrationResponse_Status = 2
	RegistrationResponse_INVALID_REQUEST    RegistrationResponse_Status = 3
)

// Enum value maps for RegistrationResponse_Status.
var (
	RegistrationResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "ALREADY_REGISTERED",
		2: "SERVER_FULL",
		3: "INVALID_REQUEST",
	}
	RegistrationResponse_Status_value = map[string]int32{
		"SUCCESS":            0,
		"ALREADY_REGISTERED": 1,
		"SERVER_FULL":        2,
		"INVALID_REQUEST":    3,
	}
)

func (x RegistrationResponse_Status) Enum() *RegistrationResponse_Status {
	p := new(RegistrationResponse_Status)
	*p = x
	return p
}

func (x RegistrationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_log_streaming_proto_enumTypes[1].Descriptor()
}

func (RegistrationResponse_Status) Type() protoreflect.EnumType {
	return &file_log_streaming_proto_enumTypes[1]
}

func (x RegistrationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationResponse_Status.Descriptor instead.
func (RegistrationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{4, 0}
}

// LogEntry - Worker Pod에서 생성되는 단일 로그 엔트리
//
// 📝 로그 구조 설명:
// - Worker Pod의 stdout/stderr에서 캐치된 한 줄의 로그를 표현
// - 시간 정보와 함께 구조화된 형태로 전송
// - NestJS 서버에서 파싱하여 웹 인터페이스에 실시간 표시
//
// 🔍 사용 예시:
//
//	{
//	  "worker_id": "otto-agent-1-abc123",
//	  "task_id": "task-456",
//	  "timestamp": "2025-09-01T12:34:56.789Z",
//	  "level": "INFO",
//	  "source": "stdout",
//	  "message": "Task processing started...",
//	  "metadata": {"step": "initialization"}
//	}
type LogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Worker Pod의 고유 식별자 (예: "otto-agent-1-abc123")
	// Main Pod에서 생성한 Worker Pod의 이름과 일치해야 함
	WorkerId string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Redis 이벤트에서 온 작업 식별자 (예: "task-456")
	// 어떤 scale_up 이벤트로 인해 생성된 작업인지 추적
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// 로그 생성 시간 (RFC3339 형식: "2025-09-01T12:34:56.789Z")
	// Worker Pod 내부에서 로그가 실제로 발생한 시점
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 로그 레벨 (INFO, ERROR, DEBUG, WARN 등)
	// 로그의 중요도나 유형을 나타냄
	Level string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	// 로그 소스 (stdout, stderr)
	// 표준 출력인지 에러 출력인지 구분
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// 실제 로그 메시지 내용 (cmd창에 출력되는 한 줄)
	// Worker Pod의 작업 진행 상황, 에러, 디버그 정보 등
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// 추가 메타데이터 (선택적)
	// 작업 단계, 파일명, 함수명 등 부가 정보
	Metadata      map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_log_streaming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *LogEntry) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *LogEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LogEntry) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogEntry) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LogEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogEntry) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// LogResponse - NestJS 서버에서 Worker Pod로의 응답 메시지
//
// 🔄 응답 처리 로직:
// - ACK: 로그 성공적으로 받음, 다음 로그 전송 가능
// - RETRY: 일시적 실패, 같은 로그를 다시 전송 필요
// - DROP: 영구적 실패, 해당 로그 포기하고 다음으로 진행
//
// 📊 백프레셔(Backpressure) 처리:
// - 서버 과부하 시 RETRY 응답으로 Worker Pod 전송 속도 조절
// - sequence 번호로 로그 순서 보장
type LogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 로그 처리 결과 상태
	Status LogResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ottoscaler.v1.LogResponse_Status" json:"status,omitempty"`
	// 디버깅용 메시지 (선택적)
	// 에러 이유나 추가 정보 제공
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 순서 보장을 위한 시퀀스 번호 (선택적)
	// 로그 전송 순서와 처리 순서 매칭
	Sequence      int64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_log_streaming_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *LogResponse) GetStatus() LogResponse_Status {
	if x != nil {
		return x.Status
	}
	return LogResponse_ACK
}

func (x *LogResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogResponse) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// WorkerRegistration contains information about a starting worker
type WorkerRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Worker pod identifier
	WorkerId string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Task identifier this worker is handling
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Worker pod metadata
	Metadata *WorkerMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// NestJS server endpoint (for health checks)
	ServerEndpoint string `protobuf:"bytes,4,opt,name=server_endpoint,json=serverEndpoint,proto3" json:"server_endpoint,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerRegistration) Reset() {
	*x = WorkerRegistration{}
	mi := &file_log_streaming_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRegistration) ProtoMessage() {}

func (x *WorkerRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRegistration.ProtoReflect.Descriptor instead.
func (*WorkerRegistration) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerRegistration) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerRegistration) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *WorkerRegistration) GetMetadata() *WorkerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkerRegistration) GetServerEndpoint() string {
	if x != nil {
		return x.ServerEndpoint
	}
	return ""
}

// WorkerMetadata contains Kubernetes pod information
type WorkerMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pod name in Kubernetes
	PodName string `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Kubernetes namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Node where pod is running
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Pod creation timestamp
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Labels applied to the pod
	Labels        map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerMetadata) Reset() {
	*x = WorkerMetadata{}
	mi := &file_log_streaming_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMetadata) ProtoMessage() {}

func (x *WorkerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMetadata.ProtoReflect.Descriptor instead.
func (*WorkerMetadata) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerMetadata) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *WorkerMetadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkerMetadata) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *WorkerMetadata) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkerMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// RegistrationResponse confirms worker registration
type RegistrationResponse struct {
	state   protoimpl.MessageState      `protogen:"open.v1"`
	Status  RegistrationResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ottoscaler.v1.RegistrationResponse_Status" json:"status,omitempty"`
	Message string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Server-assigned session ID for this worker
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Recommended logging configuration
	Config        *LoggingConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationResponse) Reset() {
	*x = RegistrationResponse{}
	mi := &file_log_streaming_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationResponse) ProtoMessage() {}

func (x *RegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationResponse.ProtoReflect.Descriptor instead.
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{4}
}

func (x *RegistrationResponse) GetStatus() RegistrationResponse_Status {
	if x != nil {
		return x.Status
	}
	return RegistrationResponse_SUCCESS
}

func (x *RegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistrationResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RegistrationResponse) GetConfig() *LoggingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// LoggingConfig contains server preferences for logging
type LoggingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum logs per second from this worker
	RateLimit int32 `protobuf:"varint,1,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// Buffer size for batching logs
	BufferSize int32 `protobuf:"varint,2,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	// Maximum message size in bytes
	MaxMessageSize int32 `protobuf:"varint,3,opt,name=max_message_size,json=maxMessageSize,proto3" json:"max_message_size,omitempty"`
	// Whether to include full metadata
	IncludeMetadata bool `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LoggingConfig) Reset() {
	*x = LoggingConfig{}
	mi := &file_log_streaming_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig) ProtoMessage() {}

func (x *LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_log_streaming_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig.ProtoReflect.Descriptor instead.
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return file_log_streaming_proto_rawDescGZIP(), []int{5}
}

func (x *LoggingConfig) GetRateLimit() int32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *LoggingConfig) GetBufferSize() int32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (x *LoggingConfig) GetMaxMessageSize() int32 {
	if x != nil {
		return x.MaxMessageSize
	}
	return 0
}

func (x *LoggingConfig) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

var File_log_streaming_proto protoreflect.FileDescriptor

const file_log_streaming_proto_rawDesc = "" +
	"\n" +
	"\x13log_streaming.proto\x12\rottoscaler.v1\"\xa6\x02\n" +
	"\bLogEntry\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\tR\ttimestamp\x12\x14\n" +
	"\x05level\x18\x04 \x01(\tR\x05level\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\x12A\n" +
	"\bmetadata\x18\a \x03(\v2%.ottoscaler.v1.LogEntry.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa6\x01\n" +
	"\vLogResponse\x129\n" +
	"\x06status\x18\x01 \x01(\x0e2!.ottoscaler.v1.LogResponse.StatusR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\x03R\bsequence\"&\n" +
	"\x06Status\x12\a\n" +
	"\x03ACK\x10\x00\x12\t\n" +
	"\x05RETRY\x10\x01\x12\b\n" +
	"\x04DROP\x10\x02\"\xae\x01\n" +
	"\x12WorkerRegistration\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x129\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1d.ottoscaler.v1.WorkerMetadataR\bmetadata\x12'\n" +
	"\x0fserver_endpoint\x18\x04 \x01(\tR\x0eserverEndpoint\"\x83\x02\n" +
	"\x0eWorkerMetadata\x12\x19\n" +
	"\bpod_name\x18\x01 \x01(\tR\apodName\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1b\n" +
	"\tnode_name\x18\x03 \x01(\tR\bnodeName\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\tR\tcreatedAt\x12A\n" +
	"\x06labels\x18\x05 \x03(\v2).ottoscaler.v1.WorkerMetadata.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9e\x02\n" +
	"\x14RegistrationResponse\x12B\n" +
	"\x06status\x18\x01 \x01(\x0e2*.ottoscaler.v1.RegistrationResponse.StatusR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x03 \x01(\tR\tsessionId\x124\n" +
	"\x06config\x18\x04 \x01(\v2\x1c.ottoscaler.v1.LoggingConfigR\x06config\"S\n" +
	"\x06Status\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\x16\n" +
	"\x12ALREADY_REGISTERED\x10\x01\x12\x0f\n" +
	"\vSERVER_FULL\x10\x02\x12\x13\n" +
	"\x0fINVALID_REQUEST\x10\x03\"\xa4\x01\n" +
	"\rLoggingConfig\x12\x1d\n" +
	"\n" +
	"rate_limit\x18\x01 \x01(\x05R\trateLimit\x12\x1f\n" +
	"\vbuffer_size\x18\x02 \x01(\x05R\n" +
	"bufferSize\x12(\n" +
	"\x10max_message_size\x18\x03 \x01(\x05R\x0emaxMessageSize\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata2\xb6\x01\n" +
	"\x13LogStreamingService\x12E\n" +
	"\n" +
	"StreamLogs\x12\x17.ottoscaler.v1.LogEntry\x1a\x1a.ottoscaler.v1.LogResponse(\x010\x01\x12X\n" +
	"\x0eRegisterWorker\x12!.ottoscaler.v1.WorkerRegistration\x1a#.ottoscaler.v1.RegistrationResponseB3Z1github.com/Team-5-CodeCat/ottoscaler/pkg/proto/v1b\x06proto3"

var (
	file_log_streaming_proto_rawDescOnce sync.Once
	file_log_streaming_proto_rawDescData []byte
)

func file_log_streaming_proto_rawDescGZIP() []byte {
	file_log_streaming_proto_rawDescOnce.Do(func() {
		file_log_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_streaming_proto_rawDesc), len(file_log_streaming_proto_rawDesc)))
	})
	return file_log_streaming_proto_rawDescData
}

var file_log_streaming_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_log_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_log_streaming_proto_goTypes = []any{
	(LogResponse_Status)(0),          // 0: ottoscaler.v1.LogResponse.Status
	(RegistrationResponse_Status)(0), // 1: ottoscaler.v1.RegistrationResponse.Status
	(*LogEntry)(nil),                 // 2: ottoscaler.v1.LogEntry
	(*LogResponse)(nil),              // 3: ottoscaler.v1.LogResponse
	(*WorkerRegistration)(nil),       // 4: ottoscaler.v1.WorkerRegistration
	(*WorkerMetadata)(nil),           // 5: ottoscaler.v1.WorkerMetadata
	(*RegistrationResponse)(nil),     // 6: ottoscaler.v1.RegistrationResponse
	(*LoggingConfig)(nil),            // 7: ottoscaler.v1.LoggingConfig
	nil,                              // 8: ottoscaler.v1.LogEntry.MetadataEntry
	nil,                              // 9: ottoscaler.v1.WorkerMetadata.LabelsEntry
}
var file_log_streaming_proto_depIdxs = []int32{
	8, // 0: ottoscaler.v1.LogEntry.metadata:type_name -> ottoscaler.v1.LogEntry.MetadataEntry
	0, // 1: ottoscaler.v1.LogResponse.status:type_name -> ottoscaler.v1.LogResponse.Status
	5, // 2: ottoscaler.v1.WorkerRegistration.metadata:type_name -> ottoscaler.v1.WorkerMetadata
	9, // 3: ottoscaler.v1.WorkerMetadata.labels:type_name -> ottoscaler.v1.WorkerMetadata.LabelsEntry
	1, // 4: ottoscaler.v1.RegistrationResponse.status:type_name -> ottoscaler.v1.RegistrationResponse.Status
	7, // 5: ottoscaler.v1.RegistrationResponse.config:type_name -> ottoscaler.v1.LoggingConfig
	2, // 6: ottoscaler.v1.LogStreamingService.StreamLogs:input_type -> ottoscaler.v1.LogEntry
	4, // 7: ottoscaler.v1.LogStreamingService.RegisterWorker:input_type -> ottoscaler.v1.WorkerRegistration
	3, // 8: ottoscaler.v1.LogStreamingService.StreamLogs:output_type -> ottoscaler.v1.LogResponse
	6, // 9: ottoscaler.v1.LogStreamingService.RegisterWorker:output_type -> ottoscaler.v1.RegistrationResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_log_streaming_proto_init() }
func file_log_streaming_proto_init() {
	if File_log_streaming_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_streaming_proto_rawDesc), len(file_log_streaming_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_log_streaming_proto_goTypes,
		DependencyIndexes: file_log_streaming_proto_depIdxs,
		EnumInfos:         file_log_streaming_proto_enumTypes,
		MessageInfos:      file_log_streaming_proto_msgTypes,
	}.Build()
	File_log_streaming_proto = out.File
	file_log_streaming_proto_goTypes = nil
	file_log_streaming_proto_depIdxs = nil
}
